{
  "name": "object",
  "description": "Chi for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/chi.git"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "in1": {
            "title": "Input",
            "type": "any"
          },
          "in2": {
            "title": "Input",
            "type": "any"
          },
          "color": {
            "title": "Color",
            "type": "string"
          }
        },
        "output": {
          "out1": {
            "title": "Out 1",
            "type": "any"
          },
          "out2": {
            "title": "Out 2",
            "type": "any"
          }
        }
      },
      "expose": [
        "chi",
        "self"
      ],
      "phrases": {
        "active": "Collecting"
      },
      "description": "Collect Chi 2",
      "ns": "chi",
      "name": "collect2",
      "fn": "// for now, input is disregarded\n/**\n *\n * Ok what I miss overhere is the information\n * of the amount of connections, which is internal\n * knowledge\n *\n * But since this is _our_ process there is\n * actually not much reason not to give that information\n *\n */\n\n// ok, could bind the required information to this\n// Need access to the data\n// Need access to the amount of connections\n// Need access to chi\n// Need access to state\n//\n// parameters(input, state, chi, source)\n//\n// Ok, what we do is collect incomming and if\n// we have\nstate = {\n};\nvar fn = function() {\n  return function(target) {\n\n    if(!state[chi.id]) state[chi.id] = {};\n\n    state[chi.id][target] = chi.read(input.color, self);\n\n    if(Object.keys(state[chi.id]) === 2) {\n\n      // send them out in correct pairs.\n      output(state[chi.id]);\n\n      delete state[chi.id];\n    }\n\n  };\n});\n\non.input.in1 = fn('out1');\non.input.in2 = fn('out2');\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any"
          },
          "color": {
            "title": "Color",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "any"
          }
        }
      },
      "expose": [
        "chi",
        "self"
      ],
      "phrases": {
        "active": "Creating Chi"
      },
      "description": "Creates Chi",
      "ns": "chi",
      "name": "create",
      "fn": "chi.create(input.color, input.in, self);\noutput.out = input.in;\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any"
          },
          "color": {
            "title": "Color",
            "type": "string"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "any"
          }
        }
      },
      "expose": [
        "chi",
        "self"
      ],
      "phrases": {
        "active": "Dropping {{input.color}} Chi"
      },
      "description": "Drop Chi",
      "ns": "chi",
      "name": "drop",
      "fn": "// for now, input is disregarded\noutput.out = chi.drop(input.color, self);\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Input",
            "type": "any"
          },
          "color": {
            "title": "Color",
            "type": "string"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "any"
          }
        }
      },
      "expose": [
        "chi",
        "self"
      ],
      "phrases": {
        "active": "Reading Chi"
      },
      "description": "Read Chi",
      "ns": "chi",
      "name": "read",
      "fn": "// for now, input is disregarded\noutput.out = chi.read(input.color, self);\n"
    }
  ],
  "twigs": []
}